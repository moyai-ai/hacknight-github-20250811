# AST Code Chunker RAG System - Complete Flox Environment
# This manifest provides a self-contained code chunking and retrieval system
# with AST-based parsing, vector storage, and LLM-powered search

version = 1

[install]
# Python for running the AST chunker
python310.pkg-path = "python310"
python310Packages.pip.pkg-path = "python310Packages.pip"
python310Packages.setuptools.pkg-path = "python310Packages.setuptools"
python310Packages.wheel.pkg-path = "python310Packages.wheel"

# Weaviate vector database
weaviate.pkg-path = "weaviate"

# Ollama for embeddings and LLM
ollama.pkg-path = "ollama"

# Development tools
git.pkg-path = "git"
curl.pkg-path = "curl"
jq.pkg-path = "jq"
ripgrep.pkg-path = "ripgrep"

# CLI enhancement tools
gum.pkg-path = "gum"
bat.pkg-path = "bat"  # Better cat with syntax highlighting

[vars]
# Project configuration
PROJECT_NAME = "AST Code Chunker"
PROJECT_VERSION = "1.0.0"

# Python environment
PYTHON_VENV_DIR = "$FLOX_ENV_CACHE/ast_chunker_venv"
PYTHONPATH = "$FLOX_ENV_PROJECT:$PYTHON_VENV_DIR/lib/python3.10/site-packages"

# Service configurations
WEAVIATE_URL = "http://localhost:8080"
WEAVIATE_PORT = "8080"
OLLAMA_URL = "http://localhost:11434"
OLLAMA_PORT = "11434"

# Data paths
DATA_DIR = "$FLOX_ENV_CACHE/data"
WEAVIATE_DATA = "$DATA_DIR/weaviate"
OLLAMA_DATA = "$DATA_DIR/ollama"
INDEX_DATA = "$DATA_DIR/index"

# Models
OLLAMA_EMBED_MODEL = "mxbai-embed-large"
OLLAMA_CHAT_MODEL = "llama3.2"

# Collection settings
WEAVIATE_COLLECTION = "CodeChunks"
CHUNK_SIZE = "1500"
INCLUDE_CONTEXT = "true"

[hook]
on-activate = '''
  # Set up environment
  export PROJECT_NAME="$PROJECT_NAME"
  export PYTHON_VENV_DIR="$PYTHON_VENV_DIR"
  export PYTHONPATH="$PYTHONPATH"
  export DATA_DIR="$DATA_DIR"
  
  # Create necessary directories
  mkdir -p "$DATA_DIR" "$WEAVIATE_DATA" "$OLLAMA_DATA" "$INDEX_DATA"
  
  # Initialize Python virtual environment if needed
  if [ ! -d "$PYTHON_VENV_DIR" ]; then
    echo "🐍 Creating Python virtual environment..."
    gum spin -s globe --title "Setting up Python environment..." -- python -m venv "$PYTHON_VENV_DIR"
    
    # Activate venv and install dependencies
    source "$PYTHON_VENV_DIR/bin/activate"
    
    echo "📦 Installing Python dependencies..."
    gum spin -s monkey --title "Installing packages..." -- pip install --upgrade pip setuptools wheel
    
    # Install required packages
    gum spin -s monkey --title "Installing weaviate-client..." -- pip install weaviate-client>=3.24.0
    gum spin -s monkey --title "Installing ollama..." -- pip install ollama>=0.1.7
    gum spin -s monkey --title "Installing AST tools..." -- pip install jedi>=0.18.0 pathspec>=0.11.0
    gum spin -s monkey --title "Installing CLI tools..." -- pip install click>=8.1.0 rich>=13.0.0
  else
    source "$PYTHON_VENV_DIR/bin/activate"
  fi
  
  # Create helper functions
  ast_chunk() {
    python "$FLOX_ENV_PROJECT/cli.py" "$@"
  }
  export -f ast_chunk
  
  # Create aliases for common operations
  alias ast-index="ast_chunk index-file"
  alias ast-index-dir="ast_chunk index-directory"
  alias ast-search="ast_chunk search"
  alias ast-ask="ast_chunk ask"
  alias ast-stats="ast_chunk stats"
  alias ast-preview="ast_chunk preview-chunks"
  
  # Display welcome message
  echo ""
  gum style \
    --foreground 212 --border-foreground 212 --border double \
    --align center --width 60 --margin "1 2" --padding "1 2" \
    "🚀 AST Code Chunker RAG System" \
    "" \
    "Version: $PROJECT_VERSION"
  
  echo ""
  echo "📚 Available Commands:"
  echo "  • flox services start        - Start all services"
  echo "  • flox services start weaviate - Start Weaviate only"
  echo "  • flox services start ollama   - Start Ollama only"
  echo "  • flox services status       - Check service status"
  echo ""
  echo "🔧 AST Chunker Commands:"
  echo "  • ast-chunk --help          - Show all commands"
  echo "  • ast-index <file>          - Index a code file"
  echo "  • ast-index-dir <dir>       - Index a directory"
  echo "  • ast-search <query>        - Search indexed code"
  echo "  • ast-ask <question>        - Ask about your code"
  echo "  • ast-stats                 - Show index statistics"
  echo "  • ast-preview <file>        - Preview chunks without indexing"
  echo ""
  echo "🚀 Quick Start:"
  echo "  1. flox services start      - Start backend services"
  echo "  2. ast-chunk init-models    - Download required models"
  echo "  3. ast-index-dir ./src -e .py -e .js  - Index your code"
  echo "  4. ast-search 'database connection'   - Search your code"
  echo ""
'''

[services.weaviate]
command = '''
  # Ensure data directory exists
  mkdir -p "$WEAVIATE_DATA"
  
  # Start Weaviate with configuration
  weaviate \
    --host 0.0.0.0 \
    --port $WEAVIATE_PORT \
    --scheme http \
    --config-file "$FLOX_ENV_CACHE/weaviate.conf"
'''
is-daemon = false
shutdown.command = "pkill -f weaviate"

[services.ollama]
command = '''
  # Set Ollama data directory
  export OLLAMA_MODELS="$OLLAMA_DATA/models"
  mkdir -p "$OLLAMA_MODELS"
  
  # Start Ollama server
  ollama serve
'''
is-daemon = false
shutdown.command = "pkill -f 'ollama serve'"

[services.init]
# One-time initialization service to download models
command = '''
  echo "🚀 Initializing AST Code Chunker environment..."
  
  # Wait for Ollama to be ready
  echo "⏳ Waiting for Ollama to start..."
  for i in {1..30}; do
    if curl -s http://localhost:11434/api/tags >/dev/null 2>&1; then
      break
    fi
    sleep 1
  done
  
  # Pull required models
  echo "📥 Downloading embedding model: $OLLAMA_EMBED_MODEL"
  ollama pull $OLLAMA_EMBED_MODEL || echo "⚠️  Failed to pull embedding model"
  
  echo "📥 Downloading chat model: $OLLAMA_CHAT_MODEL"
  ollama pull $OLLAMA_CHAT_MODEL || echo "⚠️  Failed to pull chat model"
  
  # Wait for Weaviate to be ready
  echo "⏳ Waiting for Weaviate to start..."
  for i in {1..30}; do
    if curl -s http://localhost:8080/v1/.well-known/ready >/dev/null 2>&1; then
      break
    fi
    sleep 1
  done
  
  # Initialize Weaviate schema
  echo "📊 Initializing Weaviate schema..."
  python "$FLOX_ENV_PROJECT/cli.py" init-schema || echo "⚠️  Schema may already exist"
  
  echo "✅ Initialization complete!"
  echo ""
  echo "You can now start indexing code with:"
  echo "  ast-index-dir /path/to/your/code -e .py"
'''
is-daemon = false

# Additional Python packages manifest
[profile]
bash.extra-config = '''
  # Ensure Python venv is always active
  if [ -d "$PYTHON_VENV_DIR" ]; then
    source "$PYTHON_VENV_DIR/bin/activate" 2>/dev/null || true
  fi
  
  # Add project scripts to PATH
  export PATH="$FLOX_ENV_PROJECT/bin:$PATH"
'''